import:
    - https://raw.githubusercontent.com/tangrams/refill-style/sensescape/roads-refactor/refill-style.yaml
    - https://tangrams.github.io/blocks/functions/zoom.yaml
    - https://tangrams.github.io/blocks/functions/aastep.yaml
    - https://tangrams.github.io/blocks/generative/random.yaml

sources:
    opentraffic:
        type: GeoJSON
        url: assets/1-037-740.json

textures:
    palette:
        url: assets/palette-01.png

scene:
    animated: true

global:

    sdk_traffic_overlay: true

    # COLORS
    traffic_tier1_fast_color: green
    traffic_tier2_medium_color: blue
    traffic_tier3_slow_color: orange
    traffic_tier4_stop_color: red

    # FILTERS
    traffic_tier1_fast_filter:
        all:
            - function() { return speed >= 40; }
    traffic_tier2_medium_filter:
        all:
            - function() { return speed < 40; }
    traffic_tier3_slow_filter:
        all:
            - function() { return speed < 20; }
    traffic_tier4_stop_filter:
        all:
            - function() { return speed < 5; }

layers:

    _roads:
        visible: global.sdk_traffic_overlay
        data: { source: opentraffic }
        draw:
            lines:
                order: 10001
                width: [[10,2px],[15,5px],[20,5m]]
                color: yellow

        secondary:
            filter: { best_frc: [secondary] }
            draw:
                lines:
                    width: [[10, 0.5px], [12, 0.5px], [14, 1px], [16, 2px], [17, 3px], [18, 4px], [19, 8px]]
            traffic_tier1_fast:
                filter: global.traffic_tier1_fast_filter
                draw:
                    lines:
                        #order: 10001
                        color: global.traffic_tier1_fast_color
            traffic_tier2_medium:
                filter: global.traffic_tier2_medium_filter
                draw:
                    lines:
                        #order: 10001
                        color: global.traffic_tier2_medium_color
            traffic_tier3_slow:
                filter: global.traffic_tier3_slow_filter
                draw:
                    lines:
                        # order: 10001
                        color: global.traffic_tier3_slow_color
            traffic_tier4_stop:
                filter: global.traffic_tier4_stop_filter
                draw:
                    lines:
                        # order: 10001
                        color: global.traffic_tier4_stop_color


        tertiary:
            filter: { best_frc: [tertiary] }
            draw:
                lines:
                    width: [[11, 0.5px], [15, 1px], [16, 2px], [17, 3px], [18, 4px], [19, 8px]]
            traffic_tier1_fast:
                filter: global.traffic_tier1_fast_filter
                draw:
                    lines:
                        color: global.traffic_tier1_fast_color
            traffic_tier2_medium:
                filter: global.traffic_tier2_medium_filter
                draw:
                    lines:
                        color: global.traffic_tier2_medium_color
            traffic_tier3_slow:
                filter: global.traffic_tier3_slow_filter
                draw:
                    lines:
                        color: global.traffic_tier3_slow_color
            traffic_tier4_stop:
                filter: global.traffic_tier4_stop_filter
                draw:
                    lines:
                        color: global.traffic_tier4_stop_color




    # opentraffic:
    #     data: { source: opentraffic }
    #     draw:
    #         ot-roads:
    #             order: 10001
    #             width: [[10,2px],[15,5px],[20,5m]]
    #             color: |
    #                 function () {
    #                     return [ feature.speed/255, feature.drive_on_right, feature.oneway ];
    #                 }




            # trunk_primary:
            #     opentraffic:
            #         data: { source: opentraffic }
            #         draw:
            #             ot-roads:
            #                 order: 10001 #430 #
            #                 ## these widths match roads refactor refill trunk primary
            #                 width: [[8, 0.5px], [11, 0.5px], [14, 1px], [16, 2px], [17, 4px], [18, 4px], [19, 8px]]
            #                 color: red #|
            #                     # function () {
            #                     #     return [ feature.speed/255, feature.drive_on_right, feature.oneway ];
            #                     # }

            #     routes:
            #         opentraffic:
            #             data: { source: opentraffic }
            #             draw:
            #                 ot-roads:
            #                     order: 10001 #430 #
            #                     ## these widths match roads refactor refill trunk primary routes
            #                     width: [[9, 0.5px], [14, 1.25px], [15, 1.25px], [16, 2px], [17, 4px], [18, 6px], [20, 3m]]
            #                     color: blue #|
            #                         # function () {
            #                         #     return [ feature.speed/255, feature.drive_on_right, feature.oneway ];
            #                         # }


            # secondary:
            #     opentraffic:
            #         data: { source: opentraffic }
            #         draw:
            #             ot-roads:
            #                 order: 10001 #429 #
            #                 ## these widths match roads refactor refill secondary
            #                 width: [[10, 0.5px], [12, 0.5px], [14, 1px], [16, 2px], [17, 3px], [18, 4px], [19, 8px]]
            #                 color: green #|
            #                     # function () {
            #                     #     return [ feature.speed/255, feature.drive_on_right, feature.oneway ];
            #                     # }

            # tertiary:
            #     opentraffic:
            #         data: { source: opentraffic }
            #         draw:
            #             ot-roads:
            #                 order: 10001 #427 #
            #                 ## these widths match roads refactor refill tertiary
            #                 width: [[11, 0.5px], [15, 1px], [16, 2px], [17, 3px], [18, 4px], [19, 8px]]
            #                 color: yellow #|
            #                     # function () {
            #                     #     return [ feature.speed/255, feature.drive_on_right, feature.oneway ];
            #                     # }
            # link:
            #     opentraffic:
            #         data: { source: opentraffic }
            #         draw:
            #             ot-roads:
            #                 order: 424 #10001


    # opentraffic:
    #     data: { source: opentraffic }
    #     draw:
    #         ot-roads:
    #             order: 10001
    #             width: [[10,2px],[15,5px],[20,5m]]
    #             color: |
    #                 function () {
    #                     return [ feature.speed/255, feature.drive_on_right, feature.oneway ];
    #                 }

styles:
    ot-roads:
        base: lines
        mix: [functions-zoom, functions-aastep, generative-random]
        texcoords: true
        animated: true
        lighting: false
        blend: inlay
        shaders:
            defines:
                ZOOM_START: 15.
                ZOOM_END: 20.
                ZOOM_IN: .0
                ZOOM_OUT: .5
            uniforms:
                u_palette: palette
            blocks:
                width: |
                    // One or two lanes
                    width = mix(width*v_texcoord.x, width, a_color.b);
                color: |
                    // Speed to color from palette LUT
                    color = texture2D(u_palette, vec2(smoothstep(0.,.3,v_color.r),.5));

                    // Draw arrows
                    vec2 st = v_texcoord.xy+vec2(.5,0.);

                    // Flip direction if the the drive is not on the right.
                    st.y = mix(1.-fract(st.y),st.y,v_color.g);
                    // Adjust the speed to the speed
                    st.y -= u_time*10.*v_color.r;

                    // Make chrevone arrow
                    color.a *= aastep(zoom(),fract(st.y+abs(st.x*.5-.5)));


